package ru.zharinov.tasks.oop.task_list_1.task03;

import java.util.Random;

/*
1. Создайте класс компании Company, содержащей сотрудников и реализующей методы:
•	найм одного сотрудника — hire(),
•	найм списка сотрудников – hireAll(),
•	увольнение сотрудника – fire(),
•	получение значения дохода компании – getIncome().
Аргументы и возвращаемое значение методов выберите на основании логики работы вашего приложения.
2. Создайте два метода, возвращающие список указанной длины (count). Они должны содержать сотрудников,
отсортированных по убыванию и возрастанию заработной платы:
•	List<Employee> getTopSalaryStaff(int count),
•	List<Employee> getLowestSalaryStaff(int count).
3. Создайте классы сотрудников с информацией о зарплатах и условиями начисления зарплаты:
•	Manager — зарплата складывается из фиксированной части и бонуса в виде 5% от заработанных для компании денег.
Количество заработанных денег для компании генерируйте случайным образом от 115 000 до 140 000 рублей.
•	TopManager — зарплата складывается из фиксированной части и бонуса в виде 150% от заработной платы,
если доход компании более 10 млн рублей.
•	Operator — зарплата складывается только из фиксированной части.
Каждый класс сотрудника должен имплементировать интерфейс Employee. В интерфейсе Employee должен быть объявлен метод,
возвращающий зарплату сотрудника:
•	getMonthSalary()
Аргументы и возвращаемое значение метода выберите в соответствии с логикой начисления зарплат.


Для демонстрации и тестирования работы ваших классов:
1.	Создайте и наймите в компанию: 180 операторов Operator, 80 менеджеров по продажам Manager,
10 топ-менеджеров TopManager.
2.	Распечатайте список из 10–15 самых высоких зарплат в компании.
3.	Распечатайте список из 30 самых низких зарплат в компании.
4.	Увольте 50% сотрудников.
5.	Распечатайте список из 10–15 самых высоких зарплат в компании.
6.	Распечатайте список из 30 самых низких зарплат в компании.

Примеры вывода списка зарплат
Список из пяти зарплат по убыванию:
•	230 000 руб.
•	178 000 руб.
•	165 870 руб.
•	123 000 руб.
•	117 900 руб.

Рекомендации
•	Можно создавать разные экземпляры компании со своим списком сотрудников и доходом.
•	Чтобы получить данные компании внутри класса сотрудника, настройте хранение ссылки на Company и передавайте объект
Company с помощью конструктора или сеттера.
•	Учтите, в методы получения списков зарплат могут передаваться значения count, превышающие количество сотрудников
в компании, или отрицательные.

 */
public class Main {
    public static void main(String[] args) {
        Random random = new Random();
        Company apple = new Company("Apple");
        for (int i = 1; i <= 180; i++) {
            apple.hire(new Operator("Operator" + i, random.nextInt(50000) + 10000));
        }
        for (int i = 1; i <= 80; i++) {
            apple.hire(new Manager("Manager" + i, random.nextInt(75000) + 10000));
        }
        for (int i = 1; i <= 10; i++) {
            apple.hire(new TopManager("TopManager" + i, random.nextInt(100000) + 10000, apple));
        }

        System.out.println(apple.getIncome());
        System.out.println(apple.getSumAllSalary());
        System.out.println(apple.getLowestSalaryStaff(15));
        System.out.println(apple.getTopSalaryStaff(30));
        for (int i = 0; i < apple.getEmployees().size() / 2; i++) {
            apple.fire(apple.getEmployees().get(i));
        }
        System.out.println(apple.getLowestSalaryStaff(15));
        System.out.println(apple.getTopSalaryStaff(30));
    }
}
